datasource db {
  url      = env("DB_URL")
  provider = "postgresql"
}

generator client {
  provider = "prisma-client-js"
}

enum AccountEnum {
  REVIEWED
  ACCEPTED
  REJECTED
  DELETED
}

enum Roles {
  ADMIN
  EMPLOYEE
  NORMAL
  COMPANION
}

enum CompanionBookingUnitEnum {
  PERHOUR
  PERMINUTE
}

enum GenderEnum {
  MALE
  FEMALE
  OTHER
}

enum BookingStatus {
  ACCEPTED
  UNDERREVIEW
  COMPLETED
  REJECTED
  UNDERCANCELLATION
  CANCELLATIONAPPROVED
  CANCELLED
  TRANSACTIONPENDING
  UNDEREXTENSION
  CANCELLEDREFUNDPENDING
}

enum BookingActionTypeEnum {
  CREATED
  ACCEPTED
  REJECTED
  CANCELLED
  EXTENDED
  COMPLETED
  REFUND_INITIATED
  REFUND_COMPLETED
}

enum ActionPerformedByEnum {
  USER
  COMPANION
  ADMIN
  SYSTEM
}

enum TransactionStatus {
  COMPLETED
  UNDERPROCESSED
  REFUNDED
  DECLINED
  FAILED
}

enum TransactionTypeEnum {
  BOOKING_PAYMENT
  REFUND_TO_USER
  PAYMENT_TO_COMPANION
  ADMIN_COMMISSION
  CANCELLATION_PENALTY
  EXTENSION_PAYMENT
  PLATFORM_FEE
  TAX_DEDUCTION
}

enum TransactionPartyEnum {
  USER
  COMPANION
  ADMIN
  PLATFORM
}

enum BookingDurationUnitEnum {
  HOUR
  MINUTE
}

enum UserSelectedCardUnitEnum {
  UPIID
  DEBITCARD
  CREDITCARD
}

enum LocationBaseFromEnum {
  BOOKING
  USER
}

enum NotificationFromModuleEnum {
  BOOKING
  RATING
  TRANSACTIONS
  USER
  GLOBAL
}

enum UserIssuesStatusEnum {
  ACTIVE
  REJECTED
  RESOLVED
}

enum CompanionBodyTypeEnum {
  ATHLETIC
  MUSCULAR
  SLIM
  RECTANGLE
  TRIANGLE
  SPOON
  HOURGLASS
  TOPHOURGLASS
}

enum CompanionEatingHabitsEnum {
  VEG
  NONVEG
  JAIN
  EGGETERIAN
  VEGAN
}

enum CompanionSmokingHabitEnum {
  PASSIVE_SMOKER
  ACTIVE_SMOKER
  NON_SMOKER
  OCCASIONALLY
}

enum CompanionDrinkingHabitEnum {
  DAILY_DRINKER
  NON_DRINKER
  OCCASIONALLY
}

enum CompanionSkinToneEnum {
  FAIR
  DARK
  BROWN
}

enum CompanionDescriptionEnum {
  CASUAL_COMPANIONSHIP
  COFFEEANDCONVERSATIONS
  MOVIES
  CITY_TOURS
  DINING_PARTNER
  ADVANTURE_COMPANIONSHIP
  HIKING_BUDDY
  BEACHANDWATER_SPORTS
  CAMPING_TRIPS
  ROAD_TRIPS
  SOCIAL_COMPANIONSHIP
  EVENT_PLUSONE
  PARTY_PARTNER
  BUSSINESS_NETWORKING
  CULTURAL_OUTINGS
  LIFESTYLE_COMPANIONSHIP
  FITNESS_PARTNER
  SHOPPING_BUDDY
  COOKING_COMPANION
  LANGUAGE_EXCHANGE
  PERSONALIZED_EXPERIENCE
  TRAVEL_BUDDY
  PET_LOVER_COMPANION
  UNIQUE_REQUESTS
}

enum PaymentmethodEnum {
  UPI
  DEBITCARD
  CREDITCARD
  WALLET
  NETBANKING
  EMI
  BNPL
  NEFTRTGS
  QR
}

enum PaymentType {
  BANK_ACCOUNT
  UPI
  WALLET
}

enum BankAccountType {
  SAVINGS
  CURRENT
}

enum WalletProvider {
  PAYTM
  PHONEPE
  AMAZON_PAY
  MOBIKWIK
  FREECHARGE
  AIRTEL_MONEY
  JIO_MONEY
}

model notification {
  id                 Int                        @id @default(autoincrement())
  expiry             BigInt
  content            String
  foruser            String?
  isGobal            Boolean                    @default(false)
  reminders          String[]                   @default([])
  fromModule         NotificationFromModuleEnum @default(GLOBAL)
  moduleotherDetails Json?
  contentforadmin    String?
  User               User?                      @relation(fields: [foruser], references: [id])
  createdAt          DateTime                   @default(now())
  updatedAt          DateTime                   @updatedAt
}

model location {
  id                    Int                  @id @default(autoincrement())
  userid                String?
  User                  Companion?           @relation(fields: [userid], references: [id])
  city                  String?
  zipcode               Int?
  state                 String?
  lat                   Float?
  lng                   Float?
  userinput             String?
  googleloc             String?
  googleplaceextra      Json?
  googleformattedadress String?
  islocationupdated     Boolean              @default(false)
  basefrom              LocationBaseFromEnum @default(USER)
  bookingid             Int?
  Booking               Booking?             @relation(fields: [bookingid], references: [id])
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
}

model livelocation {
  id        Int      @id @default(autoincrement())
  userid    String
  booking   Int
  Booking   Booking  @relation(fields: [booking], references: [id])
  User      User     @relation(fields: [userid], references: [id])
  city      String?
  state     String?
  zipcode   Int?
  lat       Float?
  lng       Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model companionsearchlocations {
  id            Int      @id @default(autoincrement())
  userid        String
  User          User     @relation(fields: [userid], references: [id])
  city          String?
  zipcode       Int?
  state         String?
  lat           Float?
  lng           Float?
  userAgent     Json?
  remoteAddress String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model User {
  id                       String                     @id @default(uuid())
  firstname                String
  lastname                 String
  email                    String                     @unique
  password                 String
  isGoogle                 Boolean                    @default(false)
  Images                   String[]
  isCompanion              Boolean                    @default(false)
  role                     Roles                      @default(NORMAL)
  gender                   GenderEnum?
  age                      Int?
  phoneno                  BigInt?
  lastlogin                BigInt
  anybookingdone           Boolean                    @default(false)
  isDeleted                Boolean                    @default(false)
  isEmailVerified          Boolean                    @default(false)
  expiryDate               BigInt
  Booking                  Booking[]
  Transactions             Transactions[]
  Companion                Companion[]
  Chats                    ChatRoom[]
  message                  message[]
  userpaymentmethods       userpaymentmethods[]
  livelocation             livelocation[]
  companionsearchlocations companionsearchlocations[]
  notifications            notification[]
  userissues               userissues[]
  issuescomments           issuescomments[]
  ratingsGiven             rating[]                   @relation("Rater")
  ratingsReceived          rating[]                   @relation("Ratee")
  profilevisited           Companion[]                @relation("uservisited")
  bookingStatusHistory     BookingStatusHistory[]     @relation("ActionPerformedByUser")
  transactionfromParty     TransactionLedger[]        @relation("TransactionfromParty")
  transactiontoParty       TransactionLedger[]        @relation("TransactionToParty")
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
}

model Companion {
  id                     String                     @id @default(uuid())
  userid                 String                     @unique
  User                   User                       @relation(fields: [userid], references: [id])
  bookingrate            Int
  bookingrateunit        CompanionBookingUnitEnum
  description            String[]
  Skintone               CompanionSkinToneEnum
  height                 Int
  bodytype               CompanionBodyTypeEnum
  eatinghabits           CompanionEatingHabitsEnum
  drinkinghabits         CompanionDrinkingHabitEnum
  smokinghabits          CompanionSmokingHabitEnum
  account                AccountEnum                @default(REVIEWED)
  rejectedreason         String?
  baselocation           location[]
  companionupdaterequest companionupdaterequest[]
  usersvisited           User[]                     @relation("uservisited")
  CompanionAvailability  CompanionAvailability?
}

model Booking {
  id                  Int                     @id @default(autoincrement())
  User                User[]
  bookingstart        BigInt
  bookingend          BigInt
  bookingduration     Int
  bookingdurationUnit BookingDurationUnitEnum
  bookingrate         Int
  bookingstatus       BookingStatus           @default(UNDERREVIEW)
  bookingpurpose      String?
  finalRate           Float
  OTP                 Int
  updatedLocation     String?
  updatedPurpose      String?
  Transactions        Transactions[]
  ChatRoom            ChatRoom[]
  Sessions            Sessions[]
  createdAt           DateTime                @default(now())
  updatedAt           DateTime                @updatedAt
  livelocation        livelocation[]
  Meetinglocation     location[]
  rating              rating[]
  statusHistory       BookingStatusHistory[]
  transactionLedger   TransactionLedger[]
}

model BookingStatusHistory {
  id                  String                @id @default(uuid())
  bookingId           Int
  Booking             Booking               @relation(fields: [bookingId], references: [id])
  actionType          BookingActionTypeEnum
  previousStatus      BookingStatus?
  newStatus           BookingStatus
  actionPerformedBy   ActionPerformedByEnum
  actionPerformedById String?
  ActionUser          User?                 @relation("ActionPerformedByUser", fields: [actionPerformedById], references: [id])
  comment             String?
  previousRate        Float?
  newRate             Float?
  extendedHours       Int?                  @default(0)
  refundAmount        Float?                @default(0)
  penaltyAmount       Float?                @default(0)
  extendedendtime     BigInt?
  metadata            Json? // Store additional data like reasons, calculations, etc.
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model Transactions {
  id              String            @id @default(uuid())
  txnid           String            @unique
  payurefid       String
  userid          String
  User            User              @relation(fields: [userid], references: [id])
  bookingid       Int
  Bookings        Booking           @relation(fields: [bookingid], references: [id])
  status          TransactionStatus @default(UNDERPROCESSED)
  amount          Float
  paymentmethod   String
  transactionTime BigInt
  paymentdetails  Json?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model TransactionLedger {
  id                     String               @id @default(uuid())
  txnId                  String               @unique
  bookingId              Int
  Booking                Booking              @relation(fields: [bookingId], references: [id])
  transactionType        TransactionTypeEnum
  fromParty              TransactionPartyEnum
  toParty                TransactionPartyEnum
  fromUserId             String?
  FromPartyUser          User?                @relation("TransactionfromParty", fields: [fromUserId], references: [id])
  toCompanionId          String?
  ToPartyUser            User?                @relation("TransactionToParty", fields: [toCompanionId], references: [id])
  grossAmount            Float
  platformFee            Float                @default(0)
  taxAmount              Float                @default(0)
  penaltyAmount          Float                @default(0)
  netAmount              Float
  status                 TransactionStatus    @default(UNDERPROCESSED)
  paymentMethod          String?
  paymentGatewayTxnId    String?
  paymentGatewayResponse Json?
  description            String?
  metadata               Json?
  referenceId            String?
  isSettled              Boolean              @default(false)
  settledAt              BigInt?
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
}

model AdminAccountBook {
  id              String              @id @default(uuid())
  bookingId       Int
  transactionType TransactionTypeEnum
  description     String
  grossRevenue    Float               @default(0)
  platformFee     Float               @default(0)
  taxDeducted     Float               @default(0)
  companionPayout Float               @default(0)
  refundAmount    Float               @default(0)
  penaltyReceived Float               @default(0)
  netRevenue      Float               @default(0)
  month           Int
  year            Int
  metadata        Json?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  @@index([month, year])
  @@index([transactionType])
}

model rating {
  id        Int      @id @default(autoincrement())
  raterId   String
  rateeId   String
  ratings   Int
  comment   String?
  bookingId Int
  Booking   Booking  @relation(fields: [bookingId], references: [id])
  rater     User     @relation("Rater", fields: [raterId], references: [id])
  ratee     User     @relation("Ratee", fields: [rateeId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ChatRoom {
  id        String    @id @default(uuid())
  bookingid Int
  Bookings  Booking   @relation(fields: [bookingid], references: [id])
  User      User[]
  isHide    Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  message   message[]
}

model message {
  id         Int      @id @default(autoincrement())
  senderid   String
  User       User     @relation(fields: [senderid], references: [id])
  chatroomid String
  ChatRoom   ChatRoom @relation(fields: [chatroomid], references: [id])
  body       String
  isHide     Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model userpaymentmethods {
  id                String           @id @default(uuid())
  userid            String
  User              User             @relation(fields: [userid], references: [id])
  nickname          String?
  type              PaymentType
  isVerified        Boolean          @default(false)
  accountHolderName String?
  accountNumber     String?
  ifscCode          String?
  bankName          String?
  branchName        String?
  accountType       BankAccountType?
  upiId             String?
  upiProvider       String?
  walletProvider    WalletProvider?
  walletIdentifier  String?
  recipientName     String
  isDefault         Boolean          @default(false)
  isActive          Boolean          @default(true)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  @@unique([userid, accountNumber, ifscCode])
  @@unique([userid, upiId])
  @@unique([userid, walletProvider, walletIdentifier])
  @@index([userid, isActive])
}

model Sessions {
  id               String   @id @default(uuid())
  bookingid        Int
  Bookings         Booking  @relation(fields: [bookingid], references: [id])
  sessionStartTime BigInt
  sessionEndTime   BigInt
  sessionstartedAt BigInt?
  sessionendedAt   BigInt?
  isExtended       Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model userissues {
  id          String               @id @default(uuid())
  issueId     String               @unique
  subject     String
  explanation String
  userid      String
  User        User                 @relation(references: [id], fields: [userid])
  status      UserIssuesStatusEnum @default(ACTIVE)
  resolvedBy  String?
  screenshots String[]             @default([])
  created     BigInt
  comments    issuescomments[]
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
}

model issuescomments {
  id          Int        @id @default(autoincrement())
  issueid     String
  UserIssue   userissues @relation(fields: [issueid], references: [id])
  comment     String
  userid      String
  created     BigInt
  screenshots String[]   @default([])
  User        User       @relation(references: [id], fields: [userid])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model companionrequests {
  id        Int                  @id @default(autoincrement())
  firstname String
  lastname  String
  gender    GenderEnum
  age       Int
  phoneNo   BigInt
  email     String
  photos    String[]
  status    UserIssuesStatusEnum @default(ACTIVE)
  createdAt DateTime             @default(now())
}

model companionupdaterequest {
  id               Int                         @id @default(autoincrement())
  companionid      String
  firstname        String
  lastname         String
  Images           String[]
  age              String
  phoneno          String
  height           String
  description      CompanionDescriptionEnum[]
  skintone         CompanionSkinToneEnum
  bodytype         CompanionBodyTypeEnum
  eatinghabits     CompanionEatingHabitsEnum
  drinkinghabits   CompanionDrinkingHabitEnum
  smokinghabits    CompanionSmokingHabitEnum
  baselocations    requestlocation[]
  paymentmethods   requestuserpaymentmethods[]
  companiondetails Companion                   @relation(fields: [companionid], references: [id])
  status           AccountEnum                 @default(REVIEWED)
  createdAt        DateTime                    @default(now())
  updatedAt        DateTime                    @updatedAt
}

model requestlocation {
  id                    Int                     @id @default(autoincrement())
  companionrequestid    Int?
  companionrequests     companionupdaterequest? @relation(fields: [companionrequestid], references: [id])
  city                  String?
  zipcode               Int?
  state                 String?
  lat                   Float?
  lng                   Float?
  userinput             String?
  googleloc             String?
  googleplaceextra      Json?
  googleformattedadress String?
  islocationupdated     Boolean                 @default(false)
  basefrom              LocationBaseFromEnum    @default(USER)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
}

model requestuserpaymentmethods {
  id                 String                  @id @default(uuid())
  companionrequestid Int?
  companionrequests  companionupdaterequest? @relation(fields: [companionrequestid], references: [id])
  nickname           String?
  type               PaymentType
  isVerified         Boolean                 @default(false)
  accountHolderName  String?
  accountNumber      String?
  ifscCode           String?
  bankName           String?
  branchName         String?
  accountType        BankAccountType?
  upiId              String?
  upiProvider        String?
  walletProvider     WalletProvider?
  walletIdentifier   String?
  recipientName      String
  isDefault          Boolean                 @default(false)
  isActive           Boolean                 @default(true)
  createdAt          DateTime                @default(now())
  updatedAt          DateTime                @updatedAt
}

model CompanionAvailability {
  id                Int                  @id @default(autoincrement())
  companionId       String               @unique
  Companion         Companion?           @relation(fields:[companionId], references: [id])
  isAvailable       Boolean              @default(false) // Whether the companion is available for the next 3 days
  startDate         BigInt // Start date of the availability period
  endDate           BigInt // End date of the availability period (3 days from startDate)
  availabletimeslot CompanionTimeSlot[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model CompanionTimeSlot {
  id                    Int                   @id @default(autoincrement())
  availabilityId        Int // Relation to Companion
  CompanionAvailability CompanionAvailability @relation(fields: [availabilityId], references: [id])
  dayOfWeek             Int // 0 = Sunday, 1 = Monday, ..., 6 = Saturday
  startTime             BigInt // Start time of the slot (e.g., "09:00")
  endTime               BigInt // End time of the slot (e.g., "17:00")
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
}
