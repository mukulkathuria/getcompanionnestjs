datasource db {
  url      = env("DB_URL")
  provider = "postgresql"
}

generator client {
  provider = "prisma-client-js"
}

enum AccountEnum {
  REVIEWED
  ACCEPTED
  REJECTED
  DELETED
}

enum Roles {
  ADMIN
  EMPLOYEE
  NORMAL
  COMPANION
}

enum CompanionBookingUnitEnum {
  PERHOUR
  PERMINUTE
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum BookingStatus {
  ACCEPTED
  UNDERREVIEW
  COMPLETED
  REJECTED
  UNDERCANCELLATION
  CANCELLATIONAPPROVED
  CANCELLED
}

enum TransactionStatus {
  COMPLETED
  UNDERPROCESSED
  REFUNDED
  DECLINED
}

enum BookingDurationUnitEnum {
  HOUR
  MINUTE
}

enum UserSelectedCardUnitEnum {
  UPIID
  DEBITCARD
  CREDITCARD
}

enum LocationBaseFromEnum {
  BOOKING
  USER
}

enum NotificationFromModuleEnum {
  BOOKING
  TRANSACTIONS
  USER
  GLOBAL
}

enum UserIssuesStatusEnum {
  ACTIVE
  REJECTED
  RESOLVED
}

enum CompanionBodyTypeEnum {
  ATHLETIC
  MUSCULAR
  SLIM
  RECTANGLE
  TRIANGLE
  SPOON
  HOURGLASS
  TOPHOURGLASS
}

enum CompanionSkinToneEnum {
  FAIR
  DARK
  BROWN
}


enum CompanionDescriptionEnum {
  CASUAL_COMPANIONSHIP
  COFFEEANDCONVERSATIONS
  MOVIES
  CITY_TOURS
  DINING_PARTNER
  ADVANTURE_COMPANIONSHIP
  HIKING_BUDDY
  BEACHANDWATER_SPORTS
  CAMPING_TRIPS
  ROAD_TRIPS
  SOCIAL_COMPANIONSHIP
  EVENT_PLUSONE
  PARTY_PARTNER
  BUSSINESS_NETWORKING
  CULTURAL_OUTINGS
  LIFESTYLE_COMPANIONSHIP
  FITNESS_PARTNER
  SHOPPING_BUDDY
  COOKING_COMPANION
  LANGUAGE_EXCHANGE
  PERSONALIZED_EXPERIENCE
  TRAVEL_BUDDY
  PET_LOVER_COMPANION
  UNIQUE_REQUESTS
}

model notification {
  id                 Int                        @id @default(autoincrement())
  expiry             Int
  content            String
  foruser            String?
  isGobal            Boolean                    @default(false)
  reminders          String[]
  fromModule         NotificationFromModuleEnum @default(GLOBAL)
  moduleotherDetails Json?
  User               User?                      @relation(fields: [foruser], references: [id])
  createdAt          DateTime                   @default(now())
  updatedAt          DateTime                   @updatedAt
}

model location {
  id        Int                  @id @default(autoincrement())
  userid    String?
  User      Companion?           @relation(fields: [userid], references: [id])
  city      String?
  zipcode   Int?
  lat       Float?
  lng       Float?
  basefrom  LocationBaseFromEnum @default(USER)
  bookingid Int?
  Booking   Booking?             @relation(fields: [bookingid], references: [id])
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
}

model livelocation {
  id        Int      @id @default(autoincrement())
  userid    String
  booking   Int
  Booking   Booking  @relation(fields: [booking], references: [id])
  User      User     @relation(fields: [userid], references: [id])
  city      String?
  zipcode   Int?
  lat       Float?
  lng       Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model companionsearchlocations {
  id        Int      @id @default(autoincrement())
  userid    String
  User      User     @relation(fields: [userid], references: [id])
  city      String?
  zipcode   Int?
  lat       Float?
  lng       Float?
  userAgent Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id                       String                     @id @default(uuid())
  firstname                String
  lastname                 String
  email                    String                     @unique
  password                 String
  isGoogle                 Boolean                    @default(false)
  Images                   String[]
  isCompanion              Boolean                    @default(false)
  role                     Roles                      @default(NORMAL)
  gender                   Gender?
  age                      Int?
  lastlogin                Int
  isDeleted                Boolean                    @default(false)
  expiryDate               Int
  Booking                  Booking[]
  Transactions             Transactions[]
  Companion                Companion[]
  Chats                    ChatRoom[]
  message                  message[]
  usercards                usercards[]
  livelocation             livelocation[]
  companionsearchlocations companionsearchlocations[]
  notifications            notification[]
  userissues               userissues[]
  ratingsGiven             rating[]                   @relation("Rater")
  ratingsReceived          rating[]                   @relation("Ratee")
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
}

model Companion {
  id              String                   @id @default(uuid())
  userid          String                   @unique
  User            User                     @relation(fields: [userid], references: [id])
  bookingrate     Int
  bookingrateunit CompanionBookingUnitEnum
  description     String[]
  Skintone        String
  height          Int
  bodytype        String
  account         AccountEnum              @default(REVIEWED)
  rejectedreason  String?
  baselocation    location[]
}

model Booking {
  id                  Int                     @id @default(autoincrement())
  User                User[]
  bookingstart        Int
  bookingend          Int
  bookingduration     Int
  bookingdurationUnit BookingDurationUnitEnum
  bookingrate         Int
  bookingstatus       BookingStatus           @default(UNDERREVIEW)
  bookingpurpose      String?
  finalRate           Float
  purpose             String?
  OTP                 Int
  Transactions        Transactions[]
  ChatRoom            ChatRoom[]
  Sessions            Sessions[]
  createdAt           DateTime                @default(now())
  updatedAt           DateTime                @updatedAt
  livelocation        livelocation[]
  Meetinglocation     location[]
  rating              rating?
}

model Transactions {
  id             String            @id @default(uuid())
  uitxid         String
  userid         String
  User           User              @relation(fields: [userid], references: [id])
  bookingid      Int
  Bookings       Booking           @relation(fields: [bookingid], references: [id])
  status         TransactionStatus @default(UNDERPROCESSED)
  amount         Int
  isRefunded     Boolean           @default(false)
  refundedamount Int               @default(0)
  paymentmethod  String
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
}

model rating {
  id        Int      @id @default(autoincrement())
  raterId   String
  rateeId   String
  ratings   Int
  comment   String?
  bookingId Int      @unique
  Booking   Booking  @relation(fields: [bookingId], references: [id])
  rater     User     @relation("Rater", fields: [raterId], references: [id])
  ratee     User     @relation("Ratee", fields: [rateeId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ChatRoom {
  id        String    @id @default(uuid())
  bookingid Int
  Bookings  Booking   @relation(fields: [bookingid], references: [id])
  User      User[]
  isHide    Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  message   message[]
}

model message {
  id         Int      @id @default(autoincrement())
  senderid   String
  User       User     @relation(fields: [senderid], references: [id])
  chatroomid String
  ChatRoom   ChatRoom @relation(fields: [chatroomid], references: [id])
  body       String
  isHide     Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model usercards {
  id           String                   @id @default(uuid())
  userid       String
  User         User                     @relation(fields: [userid], references: [id])
  upiId        String?
  selectedcard UserSelectedCardUnitEnum @default(UPIID)
  debidcard    Int?
  creditcard   Int?
  createdAt    DateTime                 @default(now())
  updatedAt    DateTime                 @updatedAt
}

model Sessions {
  id               String   @id @default(uuid())
  bookingid        Int
  Bookings         Booking  @relation(fields: [bookingid], references: [id])
  sessionStartTime Int
  sessionEndTime   Int
  isExtended       Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model userissues {
  id          String               @id @default(uuid())
  subject     String
  explanation String
  userid      String
  User        User                 @relation(references: [id], fields: [userid])
  status      UserIssuesStatusEnum @default(ACTIVE)
  resolvedBy  String?
  screenshots String[]
  comments    issuescomments[]
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
}

model issuescomments {
  id         Int        @id @default(autoincrement())
  issueid    String
  UserIssue  userissues @relation(fields: [issueid], references: [id])
  comment    String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}
